import os
import tempfile
import numpy as np
import librosa
import matplotlib.pyplot as plt
import librosa.display
import soundfile as sf
import pydub
from pydub import AudioSegment
from PIL import Image
import torch
import torch.nn as nn
from torchvision import models, transforms
import streamlit as st

# =============================
# Streamlit Page Config & Title
# =============================
st.set_page_config(page_title="SixtyScan", layout="centered")
st.markdown("""
    <h1 style='text-align: center; color: #222; font-size: 72px;'>SixtyScan</h1>
    <p style='text-align: center; font-size: 20px; color: #444;'>‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏û‡∏≤‡∏£‡πå‡∏Å‡∏¥‡∏ô‡∏™‡∏±‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á</p>
""", unsafe_allow_html=True)

# =============================
# Custom CSS
# =============================
st.markdown("""
    <style>
        code, pre { display: none !important; }
        h1 { color: #222222; font-size: 64px; text-align: center; font-weight: bold; }
        p, .stMarkdown { color: #333333; font-size: 18px; text-align: center; }
    </style>
""", unsafe_allow_html=True)

# =============================
# Model Definition
# =============================
class ResNet18Classifier(nn.Module):
    def __init__(self, num_classes: int = 2, dropout: float = 0.3):
        super().__init__()
        self.backbone = models.resnet18(weights=None)
        in_features = self.backbone.fc.in_features
        self.backbone.fc = nn.Sequential(
            nn.Linear(in_features, 128),
            nn.ReLU(inplace=True),
            nn.Dropout(dropout),
            nn.Linear(128, num_classes),
        )

    def forward(self, x):
        return self.backbone(x)

@st.cache_resource(show_spinner=False)
def load_model(path='best_resnet18.pth'):
    model = ResNet18Classifier()
    state = torch.load(path, map_location=torch.device('cpu'))
    model.load_state_dict(state)
    model.eval()
    return model

model = load_model()
preprocess = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])

idx2label = {0: "NONPD", 1: "PD"}

# =============================
# Predict Function
# =============================
def predict(tensor):
    with torch.no_grad():
        outputs = model(tensor)
        probs = torch.softmax(outputs, dim=1)
        return probs[0][1].item()

# =============================
# UI Mode Switch
# =============================
mode = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î (Select mode):", ["Sample Mode", "Inference Mode"], index=1, horizontal=True)

# =============================
# Sample Mode
# =============================
if mode == "Sample Mode":
    st.sidebar.title("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡πÄ‡∏õ‡∏Å‡πÇ‡∏ï‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á")
    EXAMPLE_DIR = "exampleSpectrogram"
    examples = [f for f in sorted(os.listdir(EXAMPLE_DIR)) if f.endswith('.png')]
    selected_example = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡πÄ‡∏õ‡∏Å‡πÇ‡∏ï‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á", examples)
    if selected_example:
        image_path = os.path.join(EXAMPLE_DIR, selected_example)
        st.image(Image.open(image_path), caption=selected_example)

        # Predict sample button
        if st.button("üîç Predict Sample"):
            img = Image.open(image_path).convert("RGB")
            tensor = preprocess(img).unsqueeze(0)
            prob = predict(tensor)
            percent = int(prob * 100)

            # Determine level and advice styling
            if percent <= 50:
                level = "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡πà‡∏≥ (Low)"
                label = "Non Parkinson"
                diagnosis = "‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏£‡πå‡∏Å‡∏¥‡∏ô‡∏™‡∏±‡∏ô"
                box_color = "#e6f9e6"
                advice = """
                <div style='text-align: left;'>
                <p><b>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</b></p>
                <ul style='padding-left: 20px;'>
                    <li>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£: ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏µ‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á</li>
                    <li>‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢): ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏µ‡∏•‡∏∞ 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</li>
                    <li>‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß/‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô): ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à 2‚Äì4 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡∏õ‡∏µ</li>
                </ul>
                </div>
                """
            elif percent <= 75:
                level = "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (Moderate)"
                label = "Parkinson"
                diagnosis = "‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏£‡πå‡∏Å‡∏¥‡∏ô‡∏™‡∏±‡∏ô"
                box_color = "#fff7e6"
                advice = """
                <div style='text-align: left;'>
                <p><b>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</b></p>
                <ul style='padding-left: 20px;'>
                    <li>‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ó</li>
                    <li>‡∏Ñ‡∏ß‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô</li>
                    <li>‡∏´‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏≤: ‡∏Ñ‡∏ß‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏¢‡∏≤</li>
                </ul>
                </div>
                """
            else:
                level = "‡∏™‡∏π‡∏á (High)"
                label = "Parkinson"
                diagnosis = "‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏£‡πå‡∏Å‡∏¥‡∏ô‡∏™‡∏±‡∏ô"
                box_color = "#ffe6e6"
                advice = """
                <div style='text-align: left;'>
                <p><b>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</b></p>
                <ul style='padding-left: 20px;'>
                    <li>‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ó‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î</li>
                    <li>‡∏Ñ‡∏ß‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô</li>
                    <li>‡∏´‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏≤: ‡∏Ñ‡∏ß‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏¢‡∏≤</li>
                </ul>
                </div>
                """

            st.markdown(f"""
                <div style='background-color:{box_color}; padding: 20px; border-radius: 10px; font-size: 18px; color: #000000;'>
                    <div style='text-align: center; font-size: 26px; font-weight: bold; margin-bottom: 12px;'>{label}:</div>
                    <h3 style='text-align: left;'>‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô: {level}</h3>
                    <h3 style='text-align: left;'>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏û‡∏≤‡∏£‡πå‡∏Å‡∏¥‡∏ô‡∏™‡∏±‡∏ô: {percent}%</h3>
                    <div style='height: 28px; background: linear-gradient(to right, green, yellow, red); border-radius: 6px; margin-bottom: 12px; position: relative;'>
                        <div style='position: absolute; left: {percent}%; top: 0; bottom: 0; width: 3px; background-color: black;'></div>
                    </div>
                    <h3 style='text-align: left;'>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {diagnosis}</h3>
                    {advice}
                </div>
            """, unsafe_allow_html=True)

# =============================
# Inference Mode
# =============================
if mode == "Inference Mode":
    st.markdown("""
        <ul style='font-size:18px; text-align:left;'>
            <li>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á</li>
            <li>‡∏û‡∏¢‡∏≤‡∏á‡∏Ñ‡πå: ‡∏≠‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏û‡∏¢‡∏≤‡∏á‡∏Ñ‡πå‡πÅ‡∏•‡∏∞ 5-8 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏¢‡∏Å</li>
        </ul>
        <p style='font-size:18px; text-align:left; margin-left: 24px;'> "‡πÑ‡∏≠"  "‡∏≠‡∏≥"  "‡πÄ‡∏≠"  "‡∏≠‡∏∑‡∏≠"  "‡∏≠‡∏µ"  "‡∏≠‡∏≥"  "‡∏≠‡∏≤"  "‡∏¢‡∏π"</p>
        <ul style='font-size:18px; text-align:left;'>
            <li>‡∏û‡∏≤‡∏ó‡∏≤‡∏Ñ‡∏≤: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏û‡∏¢‡∏≤‡∏á‡∏Ñ‡πå 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 6 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</li>
        </ul>
        <p style='font-size:18px; text-align:left; margin-left: 24px;'> "‡∏û‡∏≤-‡∏ó‡∏≤-‡∏Ñ‡∏≤"</p>
        <ul style='font-size:18px; text-align:left;'>
            <li>‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô</li>
        </ul>
        <p style='font-size:18px; text-align:left; margin-left: 24px;'> "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÅ‡∏à‡πà‡∏°‡πÉ‡∏™‡∏ô‡∏Å‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡∏±‡∏á‡∏ü‡∏±‡∏á‡∏ä‡∏±‡∏î"</p>
        <ul style='font-size:18px; text-align:left;'>
            <li>‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Predict</li>
        </ul>
    """, unsafe_allow_html=True)

    uploaded_files = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á (wav/mp3/aac/m4a)", type=["wav", "mp3", "aac", "m4a"], accept_multiple_files=True)

    if st.button("üîç Predict"):
        if not uploaded_files or len(uploaded_files) == 0:
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô")
        elif len(uploaded_files) > 10:
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10 ‡πÑ‡∏ü‡∏•‡πå")
        else:
            all_probs = []
            for file in uploaded_files:
                with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as tmp:
                    audio = AudioSegment.from_file(file)
                    audio.export(tmp.name, format="wav")
                    y, sr = librosa.load(tmp.name, sr=16000)
                    mel_spec = librosa.feature.melspectrogram(y=y, sr=sr, n_mels=128)
                    mel_spec_db = librosa.power_to_db(mel_spec, ref=np.max)
                    mel_spec_db = librosa.util.fix_length(mel_spec_db, size=128, axis=1)
                    mel_spec_resized = Image.fromarray(mel_spec_db).resize((224, 224))
                    image = np.array(mel_spec_resized)
                    image = np.stack([image, image, image], axis=0)
                    image = (image - image.min()) / (image.max() - image.min())
                    tensor = torch.tensor(image).float().unsqueeze(0)
                    prob = predict(tensor)
                    all_probs.append(prob)

            final_prob = np.mean(all_probs)
            percent = int(final_prob * 100)

            if percent <= 50:
                level = "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡πà‡∏≥ (Low)"
                label = "Non Parkinson"
                diagnosis = "‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏£‡πå‡∏Å‡∏¥‡∏ô‡∏™‡∏±‡∏ô"
                box_color = "#e6f9e6"
                advice = """
                <div style='text-align: left;'>
                <p><b>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</b></p>
                <ul style='padding-left: 20px;'>
                    <li>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£: ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏µ‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á</li>
                    <li>‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢): ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏µ‡∏•‡∏∞ 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</li>
                    <li>‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß/‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô): ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à 2‚Äì4 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡∏õ‡∏µ</li>
                </ul>
                </div>
                """
            elif percent <= 75:
                level = "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (Moderate)"
                label = "Parkinson"
                diagnosis = "‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏£‡πå‡∏Å‡∏¥‡∏ô‡∏™‡∏±‡∏ô"
                box_color = "#fff7e6"
                advice = """
                <div style='text-align: left;'>
                <p><b>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</b></p>
                <ul style='padding-left: 20px;'>
                    <li>‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ó</li>
                    <li>‡∏Ñ‡∏ß‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô</li>
                    <li>‡∏´‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏≤: ‡∏Ñ‡∏ß‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏¢‡∏≤</li>
                </ul>
                </div>
                """
            else:
                level = "‡∏™‡∏π‡∏á (High)"
                label = "Parkinson"
                diagnosis = "‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏£‡πå‡∏Å‡∏¥‡∏ô‡∏™‡∏±‡∏ô"
                box_color = "#ffe6e6"
                advice = """
                <div style='text-align: left;'>
                <p><b>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</b></p>
                <ul style='padding-left: 20px;'>
                    <li>‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ó‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î</li>
                    <li>‡∏Ñ‡∏ß‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô</li>
                    <li>‡∏´‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏≤: ‡∏Ñ‡∏ß‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏¢‡∏≤</li>
                </ul>
                </div>
                """

            st.markdown(f"""
                <div style='background-color:{box_color}; padding: 20px; border-radius: 10px; font-size: 18px; color: #000000;'>
                    <div style='text-align: center; font-size: 26px; font-weight: bold; margin-bottom: 12px;'>{label}:</div>
                    <h3 style='text-align: left;'>‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô: {level}</h3>
                    <h3 style='text-align: left;'>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏û‡∏≤‡∏£‡πå‡∏Å‡∏¥‡∏ô‡∏™‡∏±‡∏ô: {percent}%</h3>
                    <div style='height: 28px; background: linear-gradient(to right, green, yellow, red); border-radius: 6px; margin-bottom: 12px; position: relative;'>
                        <div style='position: absolute; left: {percent}%; top: 0; bottom: 0; width: 3px; background-color: black;'></div>
                    </div>
                    <h3 style='text-align: left;'>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {diagnosis}</h3>
                    {advice}
                </div>
            """, unsafe_allow_html=True)

# =============================
# Clear Button
# =============================
if st.button("Clear"):
    st.session_state.clear()
    st.experimental_rerun()
